EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
jorgito.exe_ -- emu8086 assembler version: 4.08  
 
[ 07/07/23  --  23:32:25 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       include "emu8086.inc"
[   3]        :                                       
[   4]        :                                       data segment
[   5]        :                                       
[   6]    0000: 00                                    x db ?
[   7]    0001: 00                                    y db ?
[   8]    0002: 00                                    cx1 db ?
[   9]    0003: 00                                    cx2 db ?
[  10]    0004: 00                                    cy1 db ?
[  11]    0005: 00                                    cy2 db ?
[  12]    0006: 00                                    numerador_pendiente db ?
[  13]    0007: 00                                    denominador_pendiente db ?
[  14]    0008: 00                                    pendiente db ?
[  15]    0009: 00                                    intercepto db ?
[  16]        :                                       
[  17]        :                                       data ends
[  18]        :                                       
[  19]        :                                       stack segment
[  20]        :                                       
[  21]    0010: 00 00 00 00 00 00 00 00 00 00 00 00   db 64 dup(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  22]        :                                       
[  23]        :                                       stack ends
[  24]        :                                       
[  25]        :                                       code segment
[  26]        :                                       
[  27]    0050:                                       start proc far
[  28]        :                                       
[  29]        :                                       assume ds:data, cs:code, ss:stack
[  30]        :                                       
[  31]    0050: 1E                                    push ds
[  32]    0051: B8 00 00                              mov ax, 0
[  33]    0054: 50                                    push ax
[  34]        :                                       
[  35]    0055: B8 00 00                              mov ax, data
[  36]    0058: 8E D8                                 mov ds, ax
[  37]    005A: 8E C0                                 mov es, ax
[  38]        :                                       
[  39]        :                                       ; A partir de aqui empezamos
[  40]        :                                       
[  41]    005C: C6 06 00 00 02                        mov x, 2
[  42]    0061: C6 06 01 00 02                        mov y, 2
[  43]    0066: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  44]    007A: E8 BD 02                              call pthis
[  45]    007D: 45 43 55 41 43 49 4F 4E 20 44 41 44   db "ECUACION DADOS DOS PUNTOS:", 0
                4F 53 20 44 4F 53 20 50 55 4E 54 4F 
                53 3A 00                            
[  46]        :                                       
[  47]    0098: 80 06 01 00 02                        add y, 2
[  48]    009D: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  49]    00B1: E8 86 02                              call pthis
[  50]    00B4: 49 6E 73 65 72 74 65 20 6C 61 73 20   db "Inserte las coordenadas de x1:", 0
                63 6F 6F 72 64 65 6E 61 64 61 73 20 
                64 65 20 78 31 3A 00                
[  51]    00D3: 80 06 00 00 20                        add x, 32
[  52]    00D8: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  53]    00EC: E8 6D 02                              call scan_num
[  54]    00EF: 88 0E 02 00                           mov cx1, cl
[  55]        :                                       
[  56]    00F3: 80 06 01 00 02                        add y, 2
[  57]    00F8: C6 06 00 00 02                        mov x, 2
[  58]    00FD: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  59]    0111: E8 26 02                              call pthis
[  60]    0114: 49 6E 73 65 72 74 65 20 6C 61 73 20   db "Inserte las coordenadas de y1:", 0
                63 6F 6F 72 64 65 6E 61 64 61 73 20 
                64 65 20 79 31 3A 00                
[  61]    0133: 80 06 00 00 20                        add x, 32
[  62]    0138: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  63]    014C: E8 0D 02                              call scan_num
[  64]    014F: 88 0E 04 00                           mov cy1, cl
[  65]        :                                       
[  66]    0153: 80 06 01 00 02                        add y, 2
[  67]    0158: C6 06 00 00 02                        mov x, 2
[  68]    015D: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  69]    0171: E8 C6 01                              call pthis
[  70]    0174: 49 6E 73 65 72 74 65 20 6C 61 73 20   db "Inserte las coordenadas de x2:", 0
                63 6F 6F 72 64 65 6E 61 64 61 73 20 
                64 65 20 78 32 3A 00                
[  71]    0193: 80 06 00 00 20                        add x, 32
[  72]    0198: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  73]    01AC: E8 AD 01                              call scan_num
[  74]    01AF: 88 0E 03 00                           mov cx2, cl
[  75]        :                                       
[  76]    01B3: 80 06 01 00 02                        add y, 2
[  77]    01B8: C6 06 00 00 02                        mov x, 2
[  78]    01BD: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  79]    01D1: E8 66 01                              call pthis
[  80]    01D4: 49 6E 73 65 72 74 65 20 6C 61 73 20   db "Inserte las coordenadas de y2:", 0
                63 6F 6F 72 64 65 6E 61 64 61 73 20 
                64 65 20 79 32 3A 00                
[  81]    01F3: 80 06 00 00 20                        add x, 32
[  82]    01F8: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[  83]    020C: E8 4D 01                              call scan_num
[  84]    020F: 88 0E 05 00                           mov cy2, cl
[  85]        :                                       
[  86]    0213:                                       calcular_pendiente:
[  87]    0213: A0 05 00                              mov al, cy2
[  88]    0216: 2A 06 04 00                           sub al, cy1
[  89]    021A: A2 06 00                              mov numerador_pendiente, al
[  90]    021D: B8 00 00                              mov ax, 0
[  91]    0220: A0 03 00                              mov al, cx2
[  92]    0223: 2A 06 02 00                           sub al, cx1
[  93]    0227: A2 07 00                              mov denominador_pendiente, al
[  94]    022A: B8 00 00                              mov ax, 0
[  95]    022D: BB 00 00                              mov bx, 0
[  96]    0230: 8A 1E 07 00                           mov bl, denominador_pendiente
[  97]    0234: A0 06 00                              mov al, numerador_pendiente
[  98]    0237: F6 F3                                 div bl
[  99]    0239: A2 08 00                              mov pendiente, al
[ 100]        :                                       
[ 101]    023C:                                       calcular_intercepto:
[ 102]    023C: B8 00 00                              mov ax, 0
[ 103]    023F: BB 00 00                              mov bx, 0
[ 104]    0242: 8A 1E 02 00                           mov bl, cx1
[ 105]    0246: A0 08 00                              mov al, pendiente
[ 106]    0249: F6 E3                                 mul bl
[ 107]    024B: A2 08 00                              mov pendiente, al
[ 108]    024E: B8 00 00                              mov ax, 0
[ 109]    0251: BB 00 00                              mov bx, 0
[ 110]    0254: A0 04 00                              mov al, cy1
[ 111]    0257: 2A 06 08 00                           sub al, pendiente
[ 112]    025B: A2 09 00                              mov intercepto, al
[ 113]        :                                       
[ 114]    025E: C6 06 00 00 02                        mov x, 2
[ 115]    0263: 80 06 01 00 04                        add y, 4
[ 116]    0268: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[ 117]    027C: E8 BB 00                              call pthis
[ 118]    027F: 4C 61 20 65 63 75 61 63 69 6F 6E 20   db "La ecuacion de la recta es: y =", 0
                64 65 20 6C 61 20 72 65 63 74 61 20 
                65 73 3A 20 79 20 3D 00             
[ 119]    029F: 80 06 00 00 20                        add x, 32
[ 120]    02A4: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[ 121]    02B8: B8 00 00                              mov ax, 0
[ 122]    02BB: A0 08 00                              mov al, pendiente
[ 123]    02BE: E8 60 01                              call print_num_uns
[ 124]    02C1: 80 06 00 00 02                        add x, 2
[ 125]    02C6: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[ 126]    02DA: E8 5D 00                              call pthis
[ 127]    02DD: 78 20 2B 00                           db "x +", 0
[ 128]    02E1: 80 06 00 00 04                        add x, 4
[ 129]    02E6: 50 53 52 B4 02 8A 36 01 00 8A 16 00   gotoxy x, y
                00 B7 00 CD 10 5A 5B 58             
[ 130]    02FA: B8 00 00                              mov ax, 0
[ 131]    02FD: A0 09 00                              mov al, intercepto
[ 132]    0300: E8 1E 01                              call print_num_uns
[ 133]        :                                       
[ 134]    0303: CB                                    ret
[ 135]        :                                       
[ 136]        :                                       start endp
[ 137]        :                                       
[ 138]        :                                       code ends
[ 139]        :                                       
[ 140]    0304: EB 32 50 1E 53 51 57 B8 40 00 8E D8   define_clear_screen
                B4 06 B0 00 B7 07 B5 00 B1 00 BF 84 
                00 8A 35 BF 4A 00 8A 15 FE CA CD 10 
                B7 00 B2 00 B6 00 B4 02 CD 10 5F 59 
                5B 1F 58 C3                         
[ 141]    0338: EB 1F 2E 89 36 07 03 5E 50 2E 8A 04   define_pthis
                46 3C 00 74 06 B4 0E CD 10 EB F2 58 
                56 2E 8B 36 07 03 C3 00 00          
[ 142]    0359: E9 C3 00 52 50 56 B9 00 00 2E C6 06   define_scan_num
                CC 03 00 B4 00 CD 16 B4 0E CD 10 3C 
                2D 74 69 3C 0D 75 03 E9 93 00 3C 08 
                75 1E BA 00 00 8B C1 2E F7 36 CD 03 
                8B C8 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB CB 3C 30 73 02 
                EB 04 3C 39 76 1A 50 B0 08 B4 0E CD 
                10 58 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB A7 50 8B C1 2E 
                F7 26 CD 03 8B C8 58 83 FA 00 75 19 
                2C 30 B4 00 8B D1 03 C8 72 0A EB 8B 
                2E C6 06 CC 03 01 EB 83 8B CA BA 00 
                00 8B C1 2E F7 36 CD 03 8B C8 50 B0 
                08 B4 0E CD 10 58 50 B0 20 B4 0E CD 
                10 58 50 B0 08 B4 0E CD 10 58 E9 5A 
                FF 2E 80 3E CC 03 00 74 02 F7 D9 5E 
                58 5A C3 00 0A 00                   
[ 143]    041F: EB 50 50 53 51 52 B9 01 00 BB 10 27   define_print_num_uns
                3D 00 00 74 32 83 FB 00 74 35 83 F9 
                00 74 04 3B C3 72 14 B9 00 00 BA 00 
                00 F7 F3 04 30 50 8A C0 B4 0E CD 10 
                58 8B C2 50 BA 00 00 8B C3 2E F7 36 
                1F 04 8B D8 58 EB CE 50 B0 30 B4 0E 
                CD 10 58 5A 59 5B 58 C3 0A 00       
[ 144]        :                                       
[ 145]        :                                       end start
[ 146]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 71      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 04      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 01      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 40      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: E0      -   check sum (l.byte)
0013: 6D      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 05      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 06      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 05      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
